Young Generation:

->Area in Java memory where new objects are created in the heap.
->Divided into three spaces: Eden space, and two Survivor spaces (s0 and s1).
->When new objects are created, they are initially allocated in the Eden Space.
->Most objects in the Young Generation are short-lived and are quickly destroyed.


Survivor Spaces (s0 and s1)

->Used for the temporary storage of objects that survive garbage collection in the Young Generation.
->Objects that survive in Eden Space are moved to one of the Survivor Spaces during garbage collection.
->The Survivor Spaces act as a buffer for the transition of objects between garbage collection cycles.
->Eventually, surviving objects may be promoted to the Old Generation when they surpass the tenuring threshold.


Old Generation:

->Area in Java memory that holds long-lived objects.
->Larger than the Young Generation because it stores objects with longer lifetimes.
->Objects that persist through multiple garbage collection cycles may be moved
   from the Young Generation to the Old Generation.

/***********************************************************************\
/                                                                       \
/     >This memory management model helps optimize the efficiency of    \
/   Java applications by segregating objects based on their lifespan    \
/   and managing their allocation and deallocation accordingly.         \
/                                                                       \
/***********************************************************************\

|--------|----|----|----------------|
|        |    |    |                |
|  Eden  | S0 | S1 |   OLD Memory   |
|        |    |    |                |
|--------|----|----|----------------|
<    Young gen     >
